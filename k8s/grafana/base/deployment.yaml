apiVersion: apps/v1
kind: Deployment
metadata:
  name: loki-deployment
  labels:
    app.kubernetes.io/name: loki
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: loki
  template:
    metadata:
      labels:
        app.kubernetes.io/name: loki
        app.kubernetes.io/version: "2.3.0"
    spec:
      containers:
      - name: loki
        image: grafana/loki:2.3.0
        ports:
        - name: http-loki
          containerPort: 3100
        resources:
          limits:
            cpu: 100m
            memory: 128Mi
          requests:
            cpu: 2m
            memory: 64Mi
  strategy:
    type: Recreate
  revisionHistoryLimit: 1
---
apiVersion: v1
kind: Service
metadata:
  name: loki-service
  labels:
    app.kubernetes.io/name: loki
spec:
  type: LoadBalancer
  selector:
    app.kubernetes.io/name: loki
  ports:
  - protocol: TCP
    port: 3100
    targetPort: http-loki
  sessionAffinity: None
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus-role
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-role
subjects:
- kind: ServiceAccount
  name: default
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-pvc
spec:
  resources:
    requests:
      storage: 1Gi
  accessModes:
  - ReadWriteOnce
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus-deployment
  labels:
    app.kubernetes.io/name: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: prometheus
  template:
    metadata:
      labels:
        app.kubernetes.io/name: prometheus
        app.kubernetes.io/version: "2.30.3"
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus:v2.38.3
        command:
        - /bin/sh
        args:
          - -c
          - >-
            echo 'scrape_configs:' > /tmp/prometheus.yml &&
            sed -se 's/^/    /; 1 s/^    /  - /' /etc/prometheus.tmpl/*.yml >> /tmp/prometheus.yml &&
            exec /bin/prometheus
              --storage.tsdb.retention.time=12h
              --config.file=/tmp/prometheus.yml
              --storage.tsdb.path=/prometheus/
        ports:
        - name: http-prometheus
          protocol: TCP
          containerPort: 9090
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 50m
            memory: 256Mi
        volumeMounts:
        - name: prometheus-pv
          mountPath: /prometheus/
      volumes:
      - name: prometheus-pv
        persistentVolumeClaim:
          claimName: prometheus-pvc
      securityContext:
        fsGroup: 65534
  strategy:
    type: Recreate
  revisionHistoryLimit: 1
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-service
  labels:
    app.kubernetes.io/name: prometheus
  annotations:
    prometheus.io/port: '9090'
    prometheus.io/scrape: 'true'
spec:
  type: LoadBalancer
  selector:
    app.kubernetes.io/name: prometheus
  ports:
  - protocol: TCP
    port: 9090
    targetPort: http-prometheus
  sessionAffinity: None
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
spec:
  resources:
    requests:
      storage: 1Gi
  accessModes:
  - ReadWriteOnce
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana-deployment
  labels:
    app.kubernetes.io/name: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grafana
        app.kubernetes.io/version: "8.2.2"
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:8.2.2
        ports:
        - name: http-grafana
          protocol: TCP
          containerPort: 3000
        resources:
          limits:
            cpu: 100m
            memory: 128Mi
          requests:
            cpu: 50m
            memory: 64Mi
        volumeMounts:
        - name: grafana-pv
          mountPath: /var/lib/grafana
        livenessProbe:
          failureThreshold: 3
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          tcpSocket:
            port: 3000
          timeoutSeconds: 1
        readinessProbe:
          failureThreshold: 3
          httpGet:
            port: 3000
            path: /robots.txt
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 2
        imagePullPolicy: IfNotPresent
      volumes:
      - name: grafana-pv
        persistentVolumeClaim:
          claimName: grafana-pvc
      securityContext:
        fsGroup: 472
        supplementalGroups:
        - 0
  strategy:
    type: Recreate
  revisionHistoryLimit: 1
---
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
  labels:
    app.kubernetes.io/name: grafana
spec:
  type: LoadBalancer
  selector:
    app.kubernetes.io/name: grafana
  ports:
  - protocol: TCP
    port: 3000
    targetPort: http-grafana
  sessionAffinity: None
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: grafana-ingress
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - host: grafana.local
    http:
      paths:
      - backend:
          service:
            name: grafana-service
            port:
              number: 3000
        path: /
        pathType: Prefix
